{"ast":null,"code":"import _asyncToGenerator from \"/Users/mayuresh483/Desktop/Personal Projects/Food Bite/Foodbite/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nvar _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/order.service\";\nimport * as i2 from \"src/app/services/cart.service\";\nimport * as i3 from \"@angular/router\";\nimport * as i4 from \"ngx-toastr\";\nconst _c0 = [\"paypal\"];\nexport class PaypalButtonComponent {\n  constructor(orderService, cartService, router, toastrService) {\n    this.orderService = orderService;\n    this.cartService = cartService;\n    this.router = router;\n    this.toastrService = toastrService;\n  }\n  ngOnInit() {\n    var _this = this;\n    const self = this;\n    paypal.Buttons({\n      debugger: createOrder\n    }(data, any, actions, any), {\n      return: actions.order.create({\n        purchase_unit: [{\n          amount: {\n            currency_code: 'INR',\n            value: self.order.totalPrice\n          }\n        }]\n      })\n    }, onApprove, /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator(function* (data, actions) {\n        debugger;\n        const payment = yield actions.order.capture();\n        _this.order.paymentId = payment.id;\n        self.orderService.pay(_this.order).subscribe({\n          next: orderId => {\n            _this.cartService.clearCart();\n            _this.router.navigateByUrl('/track/' + orderId);\n            _this.toastrService.success('Payment Saved Successfully', 'Success');\n          },\n          error: error => {\n            _this.toastrService.error('Payment Save Failed', 'Error');\n          }\n        });\n      });\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }(), onError, err => {\n      this.toastrService.error('Payment Failed', 'Error');\n      console.log(err);\n    });\n  }\n}\n_class = PaypalButtonComponent;\n_class.ɵfac = function PaypalButtonComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.OrderService), i0.ɵɵdirectiveInject(i2.CartService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i4.ToastrService));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-paypal-button\"]],\n  viewQuery: function PaypalButtonComponent_Query(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵviewQuery(_c0, 7);\n    }\n    if (rf & 2) {\n      let _t;\n      i0.ɵɵqueryRefresh(_t = i0.ɵɵloadQuery()) && (ctx.paypalElement = _t.first);\n    }\n  },\n  inputs: {\n    order: \"order\"\n  },\n  decls: 2,\n  vars: 0,\n  consts: [[\"paypal\", \"\"]],\n  template: function PaypalButtonComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelement(0, \"div\", null, 0);\n    }\n  },\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["PaypalButtonComponent","constructor","orderService","cartService","router","toastrService","ngOnInit","_this","self","paypal","Buttons","debugger","createOrder","data","any","actions","return","order","create","purchase_unit","amount","currency_code","value","totalPrice","onApprove","_ref","_asyncToGenerator","payment","capture","paymentId","id","pay","subscribe","next","orderId","clearCart","navigateByUrl","success","error","_x","_x2","apply","arguments","onError","err","console","log","i0","ɵɵdirectiveInject","i1","OrderService","i2","CartService","i3","Router","i4","ToastrService","selectors","viewQuery","PaypalButtonComponent_Query","rf","ctx","ɵɵelement"],"sources":["/Users/mayuresh483/Desktop/Personal Projects/Food Bite/Foodbite/src/app/pages/paypal-button/paypal-button.component.ts","/Users/mayuresh483/Desktop/Personal Projects/Food Bite/Foodbite/src/app/pages/paypal-button/paypal-button.component.html"],"sourcesContent":["import { Component, ElementRef, Input, OnInit, ViewChild } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { ToastrService } from 'ngx-toastr';\nimport { CartService } from 'src/app/services/cart.service';\nimport { OrderService } from 'src/app/services/order.service';\nimport { Order } from 'src/app/shared/models/Order';\n\ndeclare var paypal: any;\n\n@Component({\n  selector: 'app-paypal-button',\n  templateUrl: './paypal-button.component.html',\n  styleUrls: ['./paypal-button.component.css']\n})\nexport class PaypalButtonComponent implements OnInit {\n\n  @Input()\n  order!: Order;\n\n  @ViewChild('paypal', { static: true })\n  paypalElement!: ElementRef;\n\n  constructor(private orderService: OrderService,\n    private cartService: CartService,\n    private router: Router,\n    private toastrService: ToastrService) { }\n\n  ngOnInit(): void {\n    const self = this;\n    paypal.Buttons({\n      debugger\n      createOrder: (data: any, actions: any) => {\n        return actions.order.create({\n          purchase_unit: [\n            {\n              amount: {\n                currency_code: 'INR',\n                value: self.order.totalPrice\n              }\n            }\n          ]\n        })\n      },\n      onApprove: async (data: any, actions: any) => {\n        debugger\n        const payment = await actions.order.capture();\n        this.order.paymentId = payment.id;\n        self.orderService.pay(this.order).subscribe(\n          {\n            next: (orderId) => {\n              this.cartService.clearCart();\n              this.router.navigateByUrl('/track/' + orderId);\n              this.toastrService.success(\n                'Payment Saved Successfully',\n                'Success'\n              );\n            },\n            error: (error) => {\n              this.toastrService.error('Payment Save Failed', 'Error');\n            }\n          }\n        );\n      },\n\n      onError: (err: any) => {\n        this.toastrService.error('Payment Failed', 'Error');\n        console.log(err);\n      },\n    })\n      .render(this.paypalElement.nativeElement);\n  }\n}\n","<div #paypal></div>"],"mappings":";;;;;;;;AAcA,OAAM,MAAOA,qBAAqB;EAQhCC,YAAoBC,YAA0B,EACpCC,WAAwB,EACxBC,MAAc,EACdC,aAA4B;IAHlB,KAAAH,YAAY,GAAZA,YAAY;IACtB,KAAAC,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,aAAa,GAAbA,aAAa;EAAmB;EAE1CC,QAAQA,CAAA;IAAA,IAAAC,KAAA;IACN,MAAMC,IAAI,GAAG,IAAI;IACjBC,MAAM,CAACC,OAAO,CAAC;MACbC,QAAQ,EACRC;KAAY,CAAEC,IAAI,EAAEC,GAAG,EAAEC,OAAO,EAAED,GAAG,CAAC,EAAI;MACxCE,MAAM,EAACD,OAAO,CAACE,KAAK,CAACC,MAAM,CAAC;QAC1BC,aAAa,EAAE,CACb;UACEC,MAAM,EAAE;YACNC,aAAa,EAAE,KAAK;YACpBC,KAAK,EAAEd,IAAI,CAACS,KAAK,CAACM;;SAErB;OAEJ;KACF,EACDC,SAAS;MAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAE,WAAOb,IAAS,EAAEE,OAAY,EAAI;QAC3C;QACA,MAAMY,OAAO,SAASZ,OAAO,CAACE,KAAK,CAACW,OAAO,EAAE;QAC7CrB,KAAI,CAACU,KAAK,CAACY,SAAS,GAAGF,OAAO,CAACG,EAAE;QACjCtB,IAAI,CAACN,YAAY,CAAC6B,GAAG,CAACxB,KAAI,CAACU,KAAK,CAAC,CAACe,SAAS,CACzC;UACEC,IAAI,EAAGC,OAAO,IAAI;YAChB3B,KAAI,CAACJ,WAAW,CAACgC,SAAS,EAAE;YAC5B5B,KAAI,CAACH,MAAM,CAACgC,aAAa,CAAC,SAAS,GAAGF,OAAO,CAAC;YAC9C3B,KAAI,CAACF,aAAa,CAACgC,OAAO,CACxB,4BAA4B,EAC5B,SAAS,CACV;UACH,CAAC;UACDC,KAAK,EAAGA,KAAK,IAAI;YACf/B,KAAI,CAACF,aAAa,CAACiC,KAAK,CAAC,qBAAqB,EAAE,OAAO,CAAC;UAC1D;SACD,CACF;MACH,CAAC;MAAA,iBAAAC,EAAA,EAAAC,GAAA;QAAA,OAAAf,IAAA,CAAAgB,KAAA,OAAAC,SAAA;MAAA;IAAA,KAEDC,OAAO,EAAGC,GAAQ,IAAI;MACpB,IAAI,CAACvC,aAAa,CAACiC,KAAK,CAAC,gBAAgB,EAAE,OAAO,CAAC;MACnDO,OAAO,CAACC,GAAG,CAACF,GAAG,CAAC;IAClB,CAAC,CAAC;EACJ;;SAtDS5C,qBAAqB;;mBAArBA,MAAqB,EAAA+C,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,YAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,WAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,MAAA,GAAAP,EAAA,CAAAC,iBAAA,CAAAO,EAAA,CAAAC,aAAA;AAAA;;QAArBxD,MAAqB;EAAAyD,SAAA;EAAAC,SAAA,WAAAC,4BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;;;;;;;;;;;;;;;;MCdlCb,EAAA,CAAAe,SAAA,mBAAmB"},"metadata":{},"sourceType":"module","externalDependencies":[]}