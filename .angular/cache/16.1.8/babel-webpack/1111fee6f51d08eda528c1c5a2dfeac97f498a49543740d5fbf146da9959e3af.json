{"ast":null,"code":"var _class;\nimport { Validators } from \"@angular/forms\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"src/app/services/users.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nimport * as i4 from \"../title/title.component\";\nexport class RegistrationComponent {\n  constructor(userService, router, fb, activatedRoute) {\n    this.userService = userService;\n    this.router = router;\n    this.fb = fb;\n    this.activatedRoute = activatedRoute;\n    this.isSubmited = false;\n    this.returnUrl = '';\n    this.returnUrl = this, activatedRoute.snapshot.queryParamMap.returnUrl;\n  }\n  ngOnInit() {\n    this.registrationForm = this.fb.group({\n      name: [\"\", [Validators.required, Validators.minLength(5)]],\n      email: [\"\", [Validators.required, Validators.email]],\n      password: [\"\", Validators.required, Validators.minLength(5)],\n      confirmPassword: [\"\", Validators.required],\n      address: [\"\", Validators.required, Validators.minLength(10)]\n    }, {\n      Validators: this.passwordMatchValidation(\"password\", \"confirmPassword\")\n    });\n  }\n  get f() {\n    return this.registrationForm.controls;\n  }\n  passwordMatchValidation(password, confirmPassword) {\n    const validator = form => {\n      const passwordControl = form.get(password);\n      const confirmPasswordControl = form.get(confirmPassword);\n      if (!passwordControl || !confirmPasswordControl) return;\n      if (passwordControl.value != confirmPasswordControl.value) {\n        confirmPasswordControl.setErrors({\n          notMatch: true\n        });\n      } else {\n        const errors = confirmPasswordControl.errors;\n        if (!errors) return;\n        delete errors.notMatch;\n        confirmPasswordControl.setErrors(errors);\n      }\n    };\n    return validator;\n  }\n}\n_class = RegistrationComponent;\n_class.ɵfac = function RegistrationComponent_Factory(t) {\n  return new (t || _class)(i0.ɵɵdirectiveInject(i1.UsersService), i0.ɵɵdirectiveInject(i2.Router), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i2.ActivatedRoute));\n};\n_class.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: _class,\n  selectors: [[\"app-registration\"]],\n  decls: 3,\n  vars: 0,\n  consts: [[1, \"container\"], [1, \"details\"], [\"title\", \"User Registration\"]],\n  template: function RegistrationComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1);\n      i0.ɵɵelement(2, \"app-title\", 2);\n      i0.ɵɵelementEnd()();\n    }\n  },\n  dependencies: [i4.TitleComponent],\n  styles: [\"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"names":["Validators","RegistrationComponent","constructor","userService","router","fb","activatedRoute","isSubmited","returnUrl","snapshot","queryParamMap","ngOnInit","registrationForm","group","name","required","minLength","email","password","confirmPassword","address","passwordMatchValidation","f","controls","validator","form","passwordControl","get","confirmPasswordControl","value","setErrors","notMatch","errors","i0","ɵɵdirectiveInject","i1","UsersService","i2","Router","i3","FormBuilder","ActivatedRoute","selectors","decls","vars","consts","template","RegistrationComponent_Template","rf","ctx","ɵɵelementStart","ɵɵelement","ɵɵelementEnd"],"sources":["/Users/mayuresh483/Desktop/Personal Projects/Food Bite/Foodbite/src/app/pages/registration/registration.component.ts","/Users/mayuresh483/Desktop/Personal Projects/Food Bite/Foodbite/src/app/pages/registration/registration.component.html"],"sourcesContent":["import { Component, OnInit } from \"@angular/core\";\nimport {\n  AbstractControl,\n  FormBuilder,\n  FormGroup,\n  Validators,\n} from \"@angular/forms\";\nimport { ActivatedRoute, Router } from \"@angular/router\";\nimport { UsersService } from \"src/app/services/users.service\";\n\n@Component({\n  selector: \"app-registration\",\n  templateUrl: \"./registration.component.html\",\n  styleUrls: [\"./registration.component.css\"],\n})\nexport class RegistrationComponent implements OnInit {\n  registrationForm!: FormGroup;\n  isSubmited: boolean = false;\n  returnUrl:string='';\n\n  constructor(\n    private userService: UsersService,\n    private router: Router,\n    private fb: FormBuilder,\n    private activatedRoute: ActivatedRoute\n  ) {\n    this.returnUrl= this,activatedRoute.snapshot.queryParamMap.returnUrl;\n  }\n\n  ngOnInit(): void {\n    this.registrationForm = this.fb.group(\n      {\n        name: [\"\", [Validators.required, Validators.minLength(5)]],\n        email: [\"\", [Validators.required, Validators.email]],\n        password: [\"\", Validators.required, Validators.minLength(5)],\n        confirmPassword: [\"\", Validators.required],\n        address: [\"\", Validators.required, Validators.minLength(10)],\n      },\n      {\n        Validators: this.passwordMatchValidation(\"password\", \"confirmPassword\"),\n      }\n    );\n  }\n\n  get f() {\n    return this.registrationForm.controls;\n  }\n\n  passwordMatchValidation(password: string, confirmPassword: string) {\n    const validator = (form: AbstractControl) => {\n      const passwordControl = form.get(password);\n      const confirmPasswordControl = form.get(confirmPassword);\n\n      if (!passwordControl || !confirmPasswordControl) return;\n      if (passwordControl.value != confirmPasswordControl.value) {\n        confirmPasswordControl.setErrors({ notMatch: true });\n      } else {\n        const errors = confirmPasswordControl.errors;\n        if (!errors) return;\n        delete errors.notMatch;\n        confirmPasswordControl.setErrors(errors);\n      }\n    };\n    return validator;\n  }\n}\n","<div class=\"container\">\n    <div class=\"details\">\n        <app-title title=\"User Registration\"></app-title>\n    </div>\n</div>"],"mappings":";AACA,SAIEA,UAAU,QACL,gBAAgB;;;;;;AASvB,OAAM,MAAOC,qBAAqB;EAKhCC,YACUC,WAAyB,EACzBC,MAAc,EACdC,EAAe,EACfC,cAA8B;IAH9B,KAAAH,WAAW,GAAXA,WAAW;IACX,KAAAC,MAAM,GAANA,MAAM;IACN,KAAAC,EAAE,GAAFA,EAAE;IACF,KAAAC,cAAc,GAAdA,cAAc;IAPxB,KAAAC,UAAU,GAAY,KAAK;IAC3B,KAAAC,SAAS,GAAQ,EAAE;IAQjB,IAAI,CAACA,SAAS,GAAE,IAAI,EAACF,cAAc,CAACG,QAAQ,CAACC,aAAa,CAACF,SAAS;EACtE;EAEAG,QAAQA,CAAA;IACN,IAAI,CAACC,gBAAgB,GAAG,IAAI,CAACP,EAAE,CAACQ,KAAK,CACnC;MACEC,IAAI,EAAE,CAAC,EAAE,EAAE,CAACd,UAAU,CAACe,QAAQ,EAAEf,UAAU,CAACgB,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC;MAC1DC,KAAK,EAAE,CAAC,EAAE,EAAE,CAACjB,UAAU,CAACe,QAAQ,EAAEf,UAAU,CAACiB,KAAK,CAAC,CAAC;MACpDC,QAAQ,EAAE,CAAC,EAAE,EAAElB,UAAU,CAACe,QAAQ,EAAEf,UAAU,CAACgB,SAAS,CAAC,CAAC,CAAC,CAAC;MAC5DG,eAAe,EAAE,CAAC,EAAE,EAAEnB,UAAU,CAACe,QAAQ,CAAC;MAC1CK,OAAO,EAAE,CAAC,EAAE,EAAEpB,UAAU,CAACe,QAAQ,EAAEf,UAAU,CAACgB,SAAS,CAAC,EAAE,CAAC;KAC5D,EACD;MACEhB,UAAU,EAAE,IAAI,CAACqB,uBAAuB,CAAC,UAAU,EAAE,iBAAiB;KACvE,CACF;EACH;EAEA,IAAIC,CAACA,CAAA;IACH,OAAO,IAAI,CAACV,gBAAgB,CAACW,QAAQ;EACvC;EAEAF,uBAAuBA,CAACH,QAAgB,EAAEC,eAAuB;IAC/D,MAAMK,SAAS,GAAIC,IAAqB,IAAI;MAC1C,MAAMC,eAAe,GAAGD,IAAI,CAACE,GAAG,CAACT,QAAQ,CAAC;MAC1C,MAAMU,sBAAsB,GAAGH,IAAI,CAACE,GAAG,CAACR,eAAe,CAAC;MAExD,IAAI,CAACO,eAAe,IAAI,CAACE,sBAAsB,EAAE;MACjD,IAAIF,eAAe,CAACG,KAAK,IAAID,sBAAsB,CAACC,KAAK,EAAE;QACzDD,sBAAsB,CAACE,SAAS,CAAC;UAAEC,QAAQ,EAAE;QAAI,CAAE,CAAC;OACrD,MAAM;QACL,MAAMC,MAAM,GAAGJ,sBAAsB,CAACI,MAAM;QAC5C,IAAI,CAACA,MAAM,EAAE;QACb,OAAOA,MAAM,CAACD,QAAQ;QACtBH,sBAAsB,CAACE,SAAS,CAACE,MAAM,CAAC;;IAE5C,CAAC;IACD,OAAOR,SAAS;EAClB;;SAjDWvB,qBAAqB;;mBAArBA,MAAqB,EAAAgC,EAAA,CAAAC,iBAAA,CAAAC,EAAA,CAAAC,YAAA,GAAAH,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAC,MAAA,GAAAL,EAAA,CAAAC,iBAAA,CAAAK,EAAA,CAAAC,WAAA,GAAAP,EAAA,CAAAC,iBAAA,CAAAG,EAAA,CAAAI,cAAA;AAAA;;QAArBxC,MAAqB;EAAAyC,SAAA;EAAAC,KAAA;EAAAC,IAAA;EAAAC,MAAA;EAAAC,QAAA,WAAAC,+BAAAC,EAAA,EAAAC,GAAA;IAAA,IAAAD,EAAA;MCflCf,EAAA,CAAAiB,cAAA,aAAuB;MAEfjB,EAAA,CAAAkB,SAAA,mBAAiD;MACrDlB,EAAA,CAAAmB,YAAA,EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}