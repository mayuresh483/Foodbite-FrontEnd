{"ast":null,"code":"var _class;\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/loading.service\";\nexport class InterceptorsInterceptor {\n  constructor(loadingService) {\n    this.loadingService = loadingService;\n  }\n  intercept(request, next) {\n    return next.handle(request);\n  }\n}\n_class = InterceptorsInterceptor;\n_class.ɵfac = function InterceptorsInterceptor_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.LoadingService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["InterceptorsInterceptor","constructor","loadingService","intercept","request","next","handle","i0","ɵɵinject","i1","LoadingService","factory","ɵfac"],"sources":["/Users/mayuresh483/Desktop/Personal Projects/Food Bite/Foodbite/src/app/interceptor/interceptors.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { LoadingService } from '../services/loading.service';\n\n@Injectable()\nexport class InterceptorsInterceptor implements HttpInterceptor {\n\n  constructor(private loadingService:LoadingService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n\n    return next.handle(request);\n  }\n}\n"],"mappings":";;;AAWA,OAAM,MAAOA,uBAAuB;EAElCC,YAAoBC,cAA6B;IAA7B,KAAAA,cAAc,GAAdA,cAAc;EAAkB;EAEpDC,SAASA,CAACC,OAA6B,EAAEC,IAAiB;IAExD,OAAOA,IAAI,CAACC,MAAM,CAACF,OAAO,CAAC;EAC7B;;SAPWJ,uBAAuB;;mBAAvBA,MAAuB,EAAAO,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;AAAA;;SAAvBV,MAAuB;EAAAW,OAAA,EAAvBX,MAAuB,CAAAY;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}