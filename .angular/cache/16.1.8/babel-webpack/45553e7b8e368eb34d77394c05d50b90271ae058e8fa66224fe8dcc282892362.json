{"ast":null,"code":"var _class;\nimport { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../services/users.service\";\nexport class AuthInterceptor {\n  constructor(userService) {\n    this.userService = userService;\n  }\n  intercept(request, next) {\n    const user = this.userService.currentUser;\n    debugger;\n    if (user.token) {\n      let headers = new HttpHeaders();\n      headers = headers.set('Content-Type', 'application/json');\n      headers = headers.set('Authorization', 'my-auth-token');\n      request = request.clone({\n        headers\n      });\n    }\n    return next.handle(request);\n  }\n}\n_class = AuthInterceptor;\n_class.ɵfac = function AuthInterceptor_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.UsersService));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac\n});","map":{"version":3,"names":["HttpHeaders","AuthInterceptor","constructor","userService","intercept","request","next","user","currentUser","token","headers","set","clone","handle","i0","ɵɵinject","i1","UsersService","factory","ɵfac"],"sources":["/Users/mayuresh483/Desktop/Personal Projects/Food Bite/Foodbite/src/app/interceptor/auth.interceptor.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpHeaders\n} from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { UsersService } from '../services/users.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private userService:UsersService) {}\n\n  intercept(request: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const user = this.userService.currentUser;\n\n    debugger\n    if(user.token){\n      let headers = new HttpHeaders();\n      headers = headers.set('Content-Type', 'application/json');\n      headers = headers.set('Authorization', 'my-auth-token');\n\n      request = request.clone({headers});\n    }\n    return next.handle(request);\n  }\n}\n"],"mappings":";AACA,SAKEA,WAAW,QACN,sBAAsB;;;AAK7B,OAAM,MAAOC,eAAe;EAE1BC,YAAoBC,WAAwB;IAAxB,KAAAA,WAAW,GAAXA,WAAW;EAAgB;EAE/CC,SAASA,CAACC,OAAyB,EAAEC,IAAiB;IACpD,MAAMC,IAAI,GAAG,IAAI,CAACJ,WAAW,CAACK,WAAW;IAEzC;IACA,IAAGD,IAAI,CAACE,KAAK,EAAC;MACZ,IAAIC,OAAO,GAAG,IAAIV,WAAW,EAAE;MAC/BU,OAAO,GAAGA,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,kBAAkB,CAAC;MACzDD,OAAO,GAAGA,OAAO,CAACC,GAAG,CAAC,eAAe,EAAE,eAAe,CAAC;MAEvDN,OAAO,GAAGA,OAAO,CAACO,KAAK,CAAC;QAACF;MAAO,CAAC,CAAC;;IAEpC,OAAOJ,IAAI,CAACO,MAAM,CAACR,OAAO,CAAC;EAC7B;;SAhBWJ,eAAe;;mBAAfA,MAAe,EAAAa,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,YAAA;AAAA;;SAAfhB,MAAe;EAAAiB,OAAA,EAAfjB,MAAe,CAAAkB;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}